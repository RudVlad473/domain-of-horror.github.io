{"version":3,"file":"581.chunk.js","mappings":"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","sources":["webpack:///./node_modules/react-bootstrap/esm/divWithClassName.js","webpack:///./node_modules/react-bootstrap/esm/CardImg.js","webpack:///./node_modules/react-bootstrap/esm/CardHeaderContext.js","webpack:///./node_modules/react-bootstrap/esm/CardHeader.js","webpack:///./node_modules/react-bootstrap/esm/Card.js","webpack:///./src/components/CountryCard/CountryCard.tsx","webpack:///./src/hooks/useSortedCountries.tsx","webpack:///./src/hooks/useCookedCountries.tsx","webpack:///./src/helpers/functions/isObjectEmpty.ts","webpack:///./src/components/CountriesGrid/CountriesGrid.tsx","webpack:///./src/components/CountryCard/CountryFeature.tsx","webpack:///./src/helpers/functions/capitalizeFirstLetter.ts","webpack:///./src/helpers/functions/strToUrl.ts","webpack:///./src/components/CountryCard/CountryCard.module.scss?2ed1","webpack:///./node_modules/dom-helpers/esm/camelize.js","webpack:///./node_modules/react-bootstrap/esm/createWithBsPrefix.js"],"sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import React, { FC, useEffect, useRef } from \"react\"\r\nimport ICountryCard from \"./ICountryCard\"\r\nimport { Card } from \"react-bootstrap\"\r\nimport styles from \"./CountryCard.module.scss\"\r\nimport CountryFeature from \"./CountryFeature\"\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\"\r\nimport { useNavigate } from \"react-router\"\r\nimport strToUrl from \"../../helpers/functions/strToUrl\"\r\n\r\nconst CountryCard: FC<ICountryCard> = ({\r\n    name: country,\r\n    population,\r\n    region,\r\n    capital,\r\n    flagUrl,\r\n    cardObserver,\r\n    ...props\r\n}) => {\r\n    const cardRef = useRef(null)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        cardObserver.observe(cardRef.current)\r\n    }, [])\r\n\r\n    return (\r\n        <Card\r\n            ref={cardRef}\r\n            style={{ maxWidth: \"18rem\", marginInline: \"auto\" }}\r\n            className={`shadow hover-card ${styles.card}`}\r\n            {...props}>\r\n            <LazyLoadImage\r\n                alt=\"Country flag\"\r\n                src={flagUrl}\r\n                style={{\r\n                    aspectRatio: \"16 / 10\",\r\n                    width: 251.51,\r\n                }}\r\n                className={styles[\"img\"]}\r\n                onClick={() => navigate(`/${strToUrl(country.toLowerCase())}`)}\r\n            />\r\n\r\n            <Card.Body className={`pb-4 ${styles[\"card-article\"]}`}>\r\n                <Card.Title className={`pt-2 ${styles.header}`}>\r\n                    {country}\r\n                </Card.Title>\r\n                <Card.Text className=\"pb-2\">\r\n                    <CountryFeature feature={\"Population\"}>\r\n                        {population}\r\n                    </CountryFeature>\r\n                    <CountryFeature feature={\"Region\"}>{region}</CountryFeature>\r\n                    <CountryFeature feature={\"Capital\"}>\r\n                        {capital}\r\n                    </CountryFeature>\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CountryCard\r\n","import { useMemo } from \"react\"\r\n\r\nconst useSortedCountries = (countries: any[], fieldName: string) => {\r\n    const sortedCountries = useMemo(() => {\r\n        if (!fieldName) {\r\n            return countries\r\n        }\r\n\r\n        const fieldToSortBy = fieldName.toLowerCase()\r\n\r\n        switch (fieldToSortBy) {\r\n            case \"population\": {\r\n                return [...countries].sort(\r\n                    (a, b) => b[fieldToSortBy] - a[fieldToSortBy]\r\n                )\r\n            }\r\n            default: {\r\n                return [...countries].sort((a, b) =>\r\n                    a[fieldToSortBy]?.localeCompare(b[fieldToSortBy])\r\n                )\r\n            }\r\n        }\r\n    }, [countries, fieldName])\r\n    \r\n    return sortedCountries\r\n}\r\n\r\nexport default useSortedCountries\r\n","import { useMemo } from \"react\"\r\nimport isObjectEmpty from \"../helpers/functions/isObjectEmpty\"\r\nimport useSortedCountries from \"./useSortedCountries\"\r\n\r\nconst useCookedCountries = (\r\n    countries: any[],\r\n    filter: Object,\r\n    fieldName: string\r\n) => {\r\n    //sorts and filters\r\n    const sortedCountries = useSortedCountries(countries, fieldName)\r\n\r\n    const cookedCountries = useMemo(() => {\r\n        return isObjectEmpty(filter)\r\n            ? sortedCountries\r\n            : sortedCountries?.filter((country) =>\r\n                  country[filter.fieldName.toLowerCase()]\r\n                      ?.toLowerCase()\r\n                      .includes(filter.searchQuery.toLowerCase())\r\n              )\r\n    }, [countries, fieldName, filter])\r\n    return cookedCountries\r\n}\r\n\r\nexport default useCookedCountries\r\n","function isObjectEmpty(obj: Object): boolean {\r\n    return !Object.values(obj).some((i) => i)\r\n}\r\n\r\nexport default isObjectEmpty\r\n","import React, { useMemo } from \"react\"\r\nimport { Container } from \"react-bootstrap\"\r\nimport CountryCard from \"../CountryCard/CountryCard\"\r\n// const CountryCard = React.lazy(() => import(\"../CountryCard/CountryCard\"))\r\n// import ICountryCard from \"../CountryCard/ICountryCard\"\r\nimport separateNumber from \"../../helpers/functions/separateNumber\"\r\nimport useCookedCountries from \"../../hooks/useCookedCountries\"\r\nimport cardStyles from \"../CountryCard/CountryCard.module.scss\"\r\nimport Loading from \"../UI/Loading/Loading\"\r\n\r\nconst CountriesGrid = ({\r\n    countries,\r\n    filter,\r\n    fieldToSortBy,\r\n}: {\r\n    countries: ICountryCard[]\r\n    setFilter: Function\r\n    setFieldToSortBy: Function\r\n}) => {\r\n    const cardObserver = new IntersectionObserver(\r\n        (entries) => {\r\n            entries.forEach((entry) => {\r\n                entry.target.classList.toggle(\r\n                    cardStyles[\"active\"],\r\n                    entry.isIntersecting\r\n                )\r\n            })\r\n        },\r\n        {\r\n            threshold: 0.5,\r\n        }\r\n    )\r\n\r\n    const isDataLoading = useMemo(() => {\r\n        return countries.length === 0\r\n    }, [countries])\r\n\r\n    const cookedCountries = useCookedCountries(countries, filter, fieldToSortBy)\r\n\r\n    return isDataLoading ? (\r\n        <Loading />\r\n    ) : (\r\n        <Container\r\n            fluid\r\n            className=\"px-3 px-md-5 py-3 countries-grid\">\r\n            {cookedCountries?.map(\r\n                ({ name, population, capital, region, flag }) => (\r\n                    <CountryCard\r\n                        key={name}\r\n                        name={name}\r\n                        population={separateNumber(population)}\r\n                        region={region}\r\n                        capital={capital}\r\n                        flagUrl={flag.replace(\r\n                            /flagcdn.com\\/(\\w+).svg/,\r\n                            \"flagcdn.com/w320/$1.jpg\"\r\n                        )}\r\n                        cardObserver={cardObserver}\r\n                    />\r\n                )\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CountriesGrid\r\n","import React, { FC } from \"react\"\r\nimport styles from \"./CountryCard.module.scss\"\r\nimport capitalizeFirstLetter from \"../../helpers/functions/capitalizeFirstLetter\"\r\n\r\nconst CountryFeature = ({ feature, ...props }: { feature: string }) => {\r\n    return (\r\n        <div>\r\n            <span className={styles.attribute}>\r\n                {capitalizeFirstLetter(feature)}:\r\n            </span>\r\n            <span> {props.children || \"None\"}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryFeature\r\n","export default function capitalizeFirstLetter(str: string): string {\r\n    return str[0].toUpperCase() + str.slice(1)\r\n}\r\n","function strToUrl(str: string): string {\r\n    return str.split(/\\s/).join(\"-\")\r\n}\r\n\r\nexport default strToUrl\r\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"_mIESs6x4bmN8T_bV24N\",\"active\":\"x2UMtOkO5Z23cyJYWIhY\",\"img\":\"X6y3R94hsNQ6Sd9Jj75w\",\"header\":\"jKPa9VCwA1LTwiv_RAei\",\"attribute\":\"pZXbB86KrhhRNHmg5gCp\",\"value\":\"zl8IYhRRl09_JwgB7lg7\"};","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}"],"names":["className","p","ref","CardImg","bsPrefix","variant","as","Component","props","prefix","displayName","context","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","Provider","value","children","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","Card","bg","text","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","country","name","population","region","capital","flagUrl","cardObserver","cardRef","useRef","navigate","useNavigate","useEffect","observe","current","style","maxWidth","marginInline","styles","LazyLoadImage","alt","src","aspectRatio","width","onClick","strToUrl","toLowerCase","CountryFeature","feature","countries","filter","fieldName","sortedCountries","fieldToSortBy","sort","a","b","localeCompare","useSortedCountries","obj","values","some","i","includes","searchQuery","IntersectionObserver","entries","forEach","entry","target","classList","toggle","cardStyles","isIntersecting","threshold","isDataLoading","length","cookedCountries","useCookedCountries","Loading","Container","fluid","map","flag","key","separateNumber","replace","capitalizeFirstLetter","str","toUpperCase","slice","split","join","rHyphen","pascalCase","string","_","chr","BsComponent","Tag","resolvedPrefix"],"sourceRoot":""}