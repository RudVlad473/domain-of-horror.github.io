{"version":3,"file":"690.chunk.js","mappings":"+3BA4BA,MCFA,EApB2B,SACvBA,EACAC,EACAC,GAGA,IAAMC,EDRiB,SAACH,EAA2BE,GAqBnD,OApBwBE,EAAAA,EAAAA,UAAQ,WAC5B,IAAKF,EACD,OAAOF,EAGX,IAAMK,EAAgBH,EAAUI,cAEhC,MACS,eADDD,EAEO,EAAIL,GAAWO,MAClB,SAACC,EAAGC,GAAC,OAAKA,EAAEJ,GAAiBG,EAAEH,EAAc,IAI1C,EAAIL,GAAWO,MAAK,SAACC,EAAGC,GAAC,aACZ,QADY,EAC5BD,EAAEH,UAAc,aAAhB,EAAkBK,cAAcD,EAAEJ,GAAe,GAIjE,GAAG,CAACL,EAAWE,GAEnB,CCd4BS,CAAmBX,EAAWE,GAWtD,OATwBE,EAAAA,EAAAA,UAAQ,WAC5B,OCfeQ,EDeMX,ECdjBY,OAAOC,OAAOF,GAAKG,MAAK,SAACC,GAAC,OAAKA,CAAC,IDgB9Bb,aAAe,EAAfA,EAAiBF,QAAO,SAACgB,GAAO,aACW,QADX,EAC5BA,EAAQhB,EAAOC,UAAUI,sBAAc,aAAvC,EACMA,cACDY,SAASjB,EAAOkB,YAAYb,cAAc,IAJnDH,EChBd,IAAuBS,CDsBnB,GAAG,CAACZ,EAAWE,EAAWD,GAE9B,E,sBEtBamB,EAAwB,IAAIC,sBACrC,SAACC,GACGA,EAAQC,SAAQ,SAACC,GACbA,EAAMC,OAAOC,UAAUC,OACnBC,EAAAA,EAAAA,OACAJ,EAAMK,eAEd,GACJ,GACA,CACIC,UAAW,K,0GCMnB,IAAMC,EAAkBC,EAAAA,MACpB,kBAAM,4BAA2C,IAiDrD,QA9C+C,SAAH,GAAkC,I,IAA5B/B,EAAM,EAANA,OAAQI,EAAa,EAAbA,cAC9CL,GAAciC,EAAAA,EAAAA,YAAWC,EAAAA,GAAzBlC,UACFmC,EAAkBC,EAAmBpC,EAAWC,EAAQI,GAExDgC,GAAeC,EAAAA,EAAAA,UACfC,GAAwBD,EAAAA,EAAAA,UACxBE,GAAcF,EAAAA,EAAAA,UAMwC,G,GAA1BG,EAAAA,EAAAA,UAFT,I,EAEmC,E,8zBAArDC,EAAS,KAAEC,EAAY,KAExBC,GAAgBxC,EAAAA,EAAAA,UAAQ,WAC1B,OAA4B,IAArBJ,EAAU6C,MACrB,GAAG,CAAC7C,IAcJ,OAZA8C,EAAAA,EAAAA,YAAU,WACNT,EAAaU,QAAU3B,EACvBmB,EAAsBQ,QAAU,IAAI1B,sBAAqB,SAACC,GACrCA,EAAQ,GACXO,gBAAkBa,EAAY1C,EAAU6C,QAClDF,GAAa,SAACD,GAAS,OAAKA,EAbf,EAa2C,GAEhE,IAEAH,EAAsBQ,QAAQC,QAAQR,EAAYO,QACtD,GAAG,CAACH,IAGA,gCACKA,GAAiB,gBAACK,EAAA,EAAO,MAE1B,gBAACC,EAAA,EAAS,CAACC,OAAK,EAACC,UAAU,oCACvB,gBAACrB,EAAe,CACZI,gBAAiBA,aAAe,EAAfA,EAAiBkB,MAAM,EAAGX,GAC3CL,aAAcA,IAGlB,uBAAKiB,IAAKd,EAAcY,UAAU,kBAIlD,C,iCCjEA,SAAgB,KAAO,uBAAuB,OAAS,uBAAuB,IAAM,uBAAuB,OAAS,uBAAuB,UAAY,uBAAuB,MAAQ,uB","sources":["webpack:///./src/hooks/useSortedCountries.tsx","webpack:///./src/hooks/useCookedCountries.tsx","webpack:///./src/helpers/functions/isObjectEmpty.ts","webpack:///./src/components/CountriesGrid/IntersectionObservers/cardAnimationObserver.ts","webpack:///./src/components/CountriesGrid/CountriesGrid.tsx","webpack:///./src/components/CountryCard/CountryCard.module.scss?2ed1"],"sourcesContent":["import { useMemo } from \"react\"\r\nimport ICountryCard from \"../components/CountryCard/ICountryCard\"\r\n\r\n\r\nconst useSortedCountries = (countries: ICountryCard[], fieldName: string) => {\r\n    const sortedCountries = useMemo(() => {\r\n        if (!fieldName) {\r\n            return countries\r\n        }\r\n\r\n        const fieldToSortBy = fieldName.toLowerCase()\r\n\r\n        switch (fieldToSortBy) {\r\n            case \"population\": {\r\n                return [...countries].sort(\r\n                    (a, b) => b[fieldToSortBy] - a[fieldToSortBy]\r\n                )\r\n            }\r\n            default: {\r\n                return [...countries].sort((a, b) =>\r\n                    a[fieldToSortBy]?.localeCompare(b[fieldToSortBy])\r\n                )\r\n            }\r\n        }\r\n    }, [countries, fieldName])\r\n    return sortedCountries\r\n}\r\n\r\nexport default useSortedCountries\r\n","import { useMemo } from \"react\"\r\nimport ICountryCard, { CountryCardProps } from \"../components/CountryCard/ICountryCard\"\r\n\r\nimport isObjectEmpty from \"../helpers/functions/isObjectEmpty\"\r\nimport useSortedCountries from \"./useSortedCountries\"\r\n\r\nconst useCookedCountries = (\r\n    countries: ICountryCard[],\r\n    filter: Object,\r\n    fieldName: string\r\n) => {\r\n    //sorts and filters\r\n    const sortedCountries = useSortedCountries(countries, fieldName)\r\n\r\n    const cookedCountries = useMemo(() => {\r\n        return isObjectEmpty(filter)\r\n            ? sortedCountries\r\n            : sortedCountries?.filter((country) =>\r\n                  country[filter.fieldName.toLowerCase()]\r\n                      ?.toLowerCase()\r\n                      .includes(filter.searchQuery.toLowerCase())\r\n              )\r\n    }, [countries, fieldName, filter])\r\n    return cookedCountries\r\n}\r\n\r\nexport default useCookedCountries\r\n","function isObjectEmpty(obj: Record<string, unknown>): boolean {\r\n    return !Object.values(obj).some((i) => i)\r\n}\r\n\r\nexport default isObjectEmpty\r\n","import cardStyles from \"../../CountryCard/CountryCard.module.scss\"\r\n\r\nexport const cardAnimationObserver = new IntersectionObserver(\r\n    (entries) => {\r\n        entries.forEach((entry) => {\r\n            entry.target.classList.toggle(\r\n                cardStyles[\"active\"],\r\n                entry.isIntersecting\r\n            )\r\n        })\r\n    },\r\n    {\r\n        threshold: 0.5,\r\n    }\r\n)\r\n","import React, {\r\n    FC,\r\n    useContext,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from \"react\"\r\nimport { Container } from \"react-bootstrap\"\r\n\r\nimport { CountriesContext } from \"../../context\"\r\nimport useCookedCountries from \"../../hooks/useCookedCountries\"\r\nimport ICountryCard, { CountryCardProps } from \"../CountryCard/ICountryCard\"\r\nimport Loading from \"../UI/Loading/Loading\"\r\nimport ICountriesGridProps from \"./ICountriesGrid\"\r\n//import LoadCountriesObserver from \"./loadCountriesObserver\"\r\nimport { cardAnimationObserver } from \"./IntersectionObservers/cardAnimationObserver\"\r\n\r\nconst CookedCountries = React.lazy(\r\n    () => import(\"./CookedCountries/CookedCountries\")\r\n)\r\n\r\nconst CountriesGrid: FC<ICountriesGridProps> = ({ filter, fieldToSortBy }) => {\r\n    const { countries } = useContext(CountriesContext)!\r\n    const cookedCountries = useCookedCountries(countries, filter, fieldToSortBy)\r\n\r\n    const cardObserver = useRef<IntersectionObserver>()\r\n    const loadCountriesObserver = useRef<IntersectionObserver>()\r\n    const lastElemRef = useRef()!\r\n\r\n    // const defaultLoadCount: number =\r\n    //     (countries.length / 10) | 0 || countries.length\r\n    const defaultLoadCount = 25\r\n\r\n    const [loadCount, setLoadCount] = useState(defaultLoadCount)\r\n\r\n    const isDataLoading = useMemo(() => {\r\n        return countries.length === 0\r\n    }, [countries])\r\n\r\n    useEffect(() => {\r\n        cardObserver.current = cardAnimationObserver\r\n        loadCountriesObserver.current = new IntersectionObserver((entries) => {\r\n            const lastElem = entries[0]\r\n            if (lastElem!.isIntersecting && loadCount < countries.length) {\r\n                setLoadCount((loadCount) => loadCount + defaultLoadCount)\r\n            }\r\n        })\r\n\r\n        loadCountriesObserver.current.observe(lastElemRef.current!)\r\n    }, [isDataLoading])\r\n\r\n    return (\r\n        <>\r\n            {isDataLoading && <Loading />}\r\n\r\n            <Container fluid className=\"px-3 px-md-5 py-3 countries-grid\">\r\n                <CookedCountries\r\n                    cookedCountries={cookedCountries?.slice(0, loadCount)}\r\n                    cardObserver={cardObserver}\r\n                />\r\n\r\n                <div ref={lastElemRef!} className=\"load-trigger\"></div>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CountriesGrid\r\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"_mIESs6x4bmN8T_bV24N\",\"active\":\"x2UMtOkO5Z23cyJYWIhY\",\"img\":\"X6y3R94hsNQ6Sd9Jj75w\",\"header\":\"jKPa9VCwA1LTwiv_RAei\",\"attribute\":\"pZXbB86KrhhRNHmg5gCp\",\"value\":\"zl8IYhRRl09_JwgB7lg7\"};"],"names":["countries","filter","fieldName","sortedCountries","useMemo","fieldToSortBy","toLowerCase","sort","a","b","localeCompare","useSortedCountries","obj","Object","values","some","i","country","includes","searchQuery","cardAnimationObserver","IntersectionObserver","entries","forEach","entry","target","classList","toggle","cardStyles","isIntersecting","threshold","CookedCountries","React","useContext","CountriesContext","cookedCountries","useCookedCountries","cardObserver","useRef","loadCountriesObserver","lastElemRef","useState","loadCount","setLoadCount","isDataLoading","length","useEffect","current","observe","Loading","Container","fluid","className","slice","ref"],"sourceRoot":""}