{"version":3,"file":"874.bundle.js","mappings":"w3BA4BA,MCJA,EApB2B,SACvBA,EACAC,EACAC,GAGA,IAAMC,EDRiB,SAACH,EAAkBE,GAC1CE,QAAQC,KAAK,cACb,IAAMF,GAAkBG,EAAAA,EAAAA,UAAQ,WAC5B,IAAKJ,EACD,OAAOF,EAGX,IAAMO,EAAgBL,EAAUM,cAEhC,MACS,eADDD,EAEO,EAAIP,GAAWS,MAClB,SAACC,EAAGC,GAAJ,OAAUA,EAAEJ,GAAiBG,EAAEH,EAA/B,IAIG,EAAIP,GAAWS,MAAK,SAACC,EAAGC,GAAJ,uBACvBD,EAAEH,UADqB,aACvB,EAAkBK,cAAcD,EAAEJ,GADX,GAKtC,GAAE,CAACL,IAEJ,OADAE,QAAQS,QAAQ,cACTV,CACV,CChB2BW,CAAmBd,EAAWE,GAWtD,OATwBI,EAAAA,EAAAA,UAAQ,WAC5B,OCbeS,EDaMd,ECZjBe,OAAOC,OAAOF,GAAKG,MAAK,SAACC,GAAD,OAAOA,CAAP,IDctBhB,aAFC,EAEDA,EAAiBF,QAAO,SAACmB,GAAD,uBACpBA,EAAQnB,EAAOC,UAAUM,sBADL,aACpB,EACMA,cACDa,SAASpB,EAAOqB,YAAYd,cAHb,IADxBL,ECdd,IAAuBY,CDoBlB,GAAE,CAACb,EAAWD,GAElB,E,cEnBKsB,EAAcC,EAAAA,MAAW,kBAAM,6BAAN,IAiD/B,QA3CsB,SAAC,GAAyC,IAAvCxB,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,OAAQM,EAAoB,EAApBA,cAClCkB,EAAe,IAAIC,sBACrB,SAACC,GACGA,EAAQC,SAAQ,SAACC,GACbA,EAAMC,OAAOC,UAAUC,OACnBC,EAAAA,EAAAA,OACAJ,EAAMK,eAEb,GACJ,GACD,CACIC,UAAW,KAIbC,EAAkBC,EAAmBrC,EAAWC,EAAQM,GAE9D,OACI,gBAAC+B,EAAA,EAAD,CACIC,OAAK,EACLC,UAAU,oCACTJ,EAAgBK,KACb,gBC/BuBC,ED+BpBC,EAAH,EAAGA,KAAMC,EAAT,EAASA,WAAYC,EAArB,EAAqBA,QAASC,EAA9B,EAA8BA,OAAQC,EAAtC,EAAsCA,KAAtC,OACI,gBAAC,EAAAC,SAAD,KACI,gBAACzB,EAAD,CACI0B,IAAKN,EACLA,KAAMA,EACNC,YCpCWF,EDoCgBE,EC3BnD,SAA4BM,GAExB,IADA,IAAMC,EAAsB,GACnBhC,EAAI,KAAH,IAAG,GAAM,GAAG+B,EAAI/B,GAAK,EAAG+B,EAAKA,EAAI/B,EAAK,EAAG,CAC/C,IAAMiC,GAAYF,EAAI/B,GAAGkC,WACzBF,EAAUG,QAAQF,EAAW,IAAIG,OAAO,EAAIH,EAASI,QACxD,CAGD,OAFAL,EAAUG,QAAQJ,EAAEG,YAEbF,CACV,CAXMM,CAAmBf,GAAQgB,KAAK,MD8BfZ,OAAQA,EACRD,QAASA,EACTc,QAASZ,EAAKa,QACV,yBACA,2BAEJnC,aAAcA,IAZ1B,IAmBf,C,kCEjDD,SAAiB,C","sources":["webpack:///./src/hooks/useSortedCountries.tsx","webpack:///./src/hooks/useCookedCountries.tsx","webpack:///./src/helpers/isObjectEmpty.ts","webpack:///./src/components/CountriesGrid/CountriesGrid.tsx","webpack:///./src/helpers/separateNumber.ts","webpack:///./src/components/CountryCard/CountryCard.module.scss"],"sourcesContent":["import { useMemo } from \"react\"\r\n\r\nconst useSortedCountries = (countries: any[], fieldName: string) => {\r\n    console.time(\"sorting...\")\r\n    const sortedCountries = useMemo(() => {\r\n        if (!fieldName) {\r\n            return countries\r\n        }\r\n\r\n        const fieldToSortBy = fieldName.toLowerCase()\r\n        \r\n        switch (fieldToSortBy) {\r\n            case \"population\": {\r\n                return [...countries].sort(\r\n                    (a, b) => b[fieldToSortBy] - a[fieldToSortBy]\r\n                )\r\n            }\r\n            default: {\r\n                return [...countries].sort((a, b) =>\r\n                    a[fieldToSortBy]?.localeCompare(b[fieldToSortBy])\r\n                )\r\n            }\r\n        }\r\n    }, [fieldName])\r\n    console.timeEnd(\"sorting...\")\r\n    return sortedCountries\r\n}\r\n\r\nexport default useSortedCountries\r\n","import { useMemo } from \"react\"\r\nimport isObjectEmpty from \"../helpers/isObjectEmpty\"\r\nimport useSortedCountries from \"./useSortedCountries\"\r\n\r\nconst useCookedCountries = (\r\n    countries: any[],\r\n    filter: Object,\r\n    fieldName: string\r\n) => {\r\n    //sorts and filters\r\n    const sortedCountries = useSortedCountries(countries, fieldName)\r\n\r\n    const cookedCountries = useMemo(() => {\r\n        return isObjectEmpty(filter)\r\n            ? sortedCountries\r\n            : sortedCountries?.filter((country) =>\r\n                  country[filter.fieldName.toLowerCase()]\r\n                      ?.toLowerCase()\r\n                      .includes(filter.searchQuery.toLowerCase())\r\n              )\r\n    }, [fieldName, filter])\r\n    return cookedCountries\r\n}\r\n\r\nexport default useCookedCountries\r\n","function isObjectEmpty(obj: Object): boolean {\r\n    return !Object.values(obj).some((i) => i)\r\n}\r\n\r\nexport default isObjectEmpty\r\n","import React, { memo, Suspense } from \"react\"\r\nimport { Container } from \"react-bootstrap\"\r\n// import CountryCard from \"../CountryCard/CountryCard\"\r\nconst CountryCard = React.lazy(() => import(\"../CountryCard/CountryCard\"))\r\n// import ICountryCard from \"../CountryCard/ICountryCard\"\r\nimport separateNumber from \"../../helpers/separateNumber\"\r\nimport useCookedCountries from \"../../hooks/useCookedCountries\"\r\nimport cardStyles from \"../CountryCard/CountryCard.module.scss\"\r\n\r\nconst CountriesGrid = ({ countries, filter, fieldToSortBy }) => {\r\n    const cardObserver = new IntersectionObserver(\r\n        (entries) => {\r\n            entries.forEach((entry) => {\r\n                entry.target.classList.toggle(\r\n                    cardStyles[\"active\"],\r\n                    entry.isIntersecting\r\n                )\r\n            })\r\n        },\r\n        {\r\n            threshold: 0.5,\r\n        }\r\n    )\r\n\r\n    const cookedCountries = useCookedCountries(countries, filter, fieldToSortBy)\r\n\r\n    return (\r\n        <Container\r\n            fluid\r\n            className=\"px-3 px-md-5 py-3 countries-grid\">\r\n            {cookedCountries.map(\r\n                ({ name, population, capital, region, flag }) => (\r\n                    <Suspense>\r\n                        <CountryCard\r\n                            key={name}\r\n                            name={name}\r\n                            population={separateNumber(population)}\r\n                            region={region}\r\n                            capital={capital}\r\n                            flagUrl={flag.replace(\r\n                                /flagcdn.com\\/(\\w+).svg/,\r\n                                \"flagcdn.com/w320/$1.jpg\"\r\n                            )}\r\n                            cardObserver={cardObserver}\r\n                        />\r\n                    </Suspense>\r\n                )\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CountriesGrid\r\n","export default function separateNumber(number: number): string {\r\n    //81770900 ==> 81,770,900\r\n    //206135893 ==> 206,135,893\r\n\r\n    //44700000 ==> 44,700,000\r\n    //28875 ==> 28,875\r\n\r\n    return splitNumberByRanks(number).join(\",\")\r\n\r\n    function splitNumberByRanks(n: number): string[] {\r\n        const numPieces: string[] = []\r\n        for (let i = 10 ** 3; n / i >= 1; n = (n / i) | 0) {\r\n            const numPiece = (n % i).toString()\r\n            numPieces.unshift(numPiece + \"0\".repeat(3 - numPiece.length))\r\n        }\r\n        numPieces.unshift(n.toString())\r\n\r\n        return numPieces\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["countries","filter","fieldName","sortedCountries","console","time","useMemo","fieldToSortBy","toLowerCase","sort","a","b","localeCompare","timeEnd","useSortedCountries","obj","Object","values","some","i","country","includes","searchQuery","CountryCard","React","cardObserver","IntersectionObserver","entries","forEach","entry","target","classList","toggle","cardStyles","isIntersecting","threshold","cookedCountries","useCookedCountries","Container","fluid","className","map","number","name","population","capital","region","flag","Suspense","key","n","numPieces","numPiece","toString","unshift","repeat","length","splitNumberByRanks","join","flagUrl","replace"],"sourceRoot":""}