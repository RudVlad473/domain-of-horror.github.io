{"version":3,"file":"486.chunk.js","mappings":"sKA8BA,QAnB4CA,EAAAA,YACxC,WAAgDC,GAAQ,IAArDC,EAAM,EAANA,OAAQC,EAAI,EAAJA,KAAI,IAAEC,WAAAA,OAAU,IAAG,GAAI,EAAKC,E,kXAAK,MACxC,OACI,4BACIJ,IAAKA,EAELK,UAAS,UChBM,uBDgBqB,aAC/BF,GCjB0D,wBDmB/DG,YAAa,mBACbC,KAAMN,EACNC,KAAMA,EACNM,WAAW,SACVJ,EAAMK,SAGnB,I,uCELJ,QAZgCV,EAAAA,YAC5B,YAAiC,IAA9BC,EAAG,EAAHA,IAAKU,EAAE,EAAFA,GAAIC,EAAI,EAAJA,KAASP,E,kXAAK,MACtB,OACI,0BACUJ,IAAAA,EAAKU,GAAAA,EAAIC,KAAAA,EACfN,UCd8C,wBDe7CD,EAAMK,SAGnB,IEoCJ,EAtCoC,SAAH,GAS3B,IARFC,EAAE,EAAFA,GACAT,EAAM,EAANA,OACAW,EAAS,EAATA,UACAC,EAAW,EAAXA,YACAC,EAAS,EAATA,UACAC,EAAa,EAAbA,cACAC,EAAW,EAAXA,YACAC,EAAM,EAANA,OAMA,OAJAC,EAAAA,EAAAA,YAAU,WACNF,SAAAA,EAAaG,QAAQC,OACzB,GAAG,IAGC,wBACIV,GAAIT,EACJI,UCjCqD,uBDkCrDgB,SAAU,SAACC,GACPA,EAAEC,iBACFD,EAAEE,kBACFP,EAAQP,EACZ,GACA,gBAACe,EAAA,EAAc,CACXC,IAAKd,EACLe,IAAK,MACLC,SAAU,WAEd,gBAAC,EAAY,CAAC5B,IAAKgB,GAAcD,GAAiB,IAClD,gBAAC,EAAM,CACHf,IAAKc,EACLH,KAAK,UACJE,GAIjB,C,2NEsBA,QA5DsC,SAAH,GAAuB,IAAjBgB,EAAU,EAAVA,WACrC,GAAgCC,EAAAA,EAAAA,YAAWC,EAAAA,GAAnCnB,EAAS,EAATA,UAAWoB,EAAQ,EAARA,SACXC,GAAoBH,EAAAA,EAAAA,YAAWI,EAAAA,GAA/BD,gBACAE,GAAWL,EAAAA,EAAAA,YAAWM,EAAAA,GAAtBD,OAIFE,GAAgBC,EAAAA,EAAAA,QAA4B,MAE5CC,GAAWC,EAAAA,EAAAA,cAAY,WACzB,IAAMC,EAAOJ,EAAelB,QAASuB,MAE/BC,GAAiBC,EAAAA,EAAAA,GAAqBH,GAEpCE,IACCE,EAAAA,EAAAA,OASTZ,GAAgB,SAACa,GAAmB,gB,gDAC5BA,aAAmB,EAAnBA,EAAqBC,QACrB,SAACC,GAAK,MAAkB,cAAbA,EAAMtC,EAAkB,MAClC,K,gkBAAE,CACP,CACIA,GAAI,GAAF,OAAKyB,EAAS,GAChBc,WAAY,CAAEA,WAAY,GAC1BC,gBAAiB,CACbC,WAAY,CACRC,YAAa,CACTC,SAAU,CACNzC,WACI0C,EAAAA,EAAAA,GAA6BtB,GACjCA,SAAAA,GAEJuB,KAAM,UAGdC,QAAS,CAAEA,QAASf,O,KAE3B,IAzBGgB,MAAMd,EA2BlB,GAAG,CAAC/B,EAAWiB,EAAYM,IAE3B,OACI,gBAACuB,EAAA,QAAQ,CACLzD,OAAQ,YACRW,UAAWA,EACXI,YAAaqB,EACbtB,cAAa,WAAMc,EAAU,MAC7BhB,YAAa,QACbI,OAAQsB,GAGpB,E,aCnDA,QAf8B,SAACnC,GAC3B,OACI,gCACKA,EAAM8C,gBACH,gBAACS,EAAA,EAAmBvD,GAEpB,gBAAC,EAAS,CACNwD,IAAKxD,EAAMM,GACXmB,WAAYzB,EAAMyB,aAKtC,E,oOC0CA,QAlDkC,SAAH,GAAoB,IAAdgC,EAAO,EAAPA,QAgBjC,OAXqB/B,EAAAA,EAAAA,YAAWI,EAAAA,GAAxBF,UAEcF,EAAAA,EAAAA,YAAWC,EAAAA,GAAzBnB,UAUJ,iCACKiD,aAAO,EAAPA,EAASC,QAAU,GAChB,2BACIzD,UC/BwD,uBDgCxD,aAAW,WACX,uBACIA,UClC8I,yBDsClJ,uBAAKA,UCtCoF,wBDuCpFwD,aAAO,EAAPA,EAASE,KAAI,SAACf,GAAK,OAChB,gCACKA,EAAME,gBACH,gBAAC,EAAK,GACFU,IAAKZ,EAAMtC,IACPsC,IAGR,gBAAC,EAAS,CACNY,IAAKZ,EAAMtC,GACXmB,WAAYmB,EAAMnB,aAG3B,MAO/B,C,gBE5DO,IAAKgB,E,yBAIX,SAJWA,GAAAA,EAAa,qFAAbA,EAAa,wEAAbA,EAAa,0CAIxB,CAJWA,IAAAA,EAAa,KAgBzB,QAVA,SAA8BJ,GAC1B,OAAKA,EAEMA,EAAKqB,OAAS,EACdjB,EAAcmB,MAEdnB,EAAcoB,OAJdpB,EAAcqB,KAM7B,C","sources":["webpack:///./src/components/CommentInput/CommentInput.tsx","webpack:///./src/components/CommentInput/CommentInput.module.scss?d473","webpack:///./src/components/UI/Button/Button.tsx","webpack:///./src/components/UI/Button/Button.module.scss?61b8","webpack:///./src/components/PostForm/PostForm.tsx","webpack:///./src/components/PostForm/PostForm.module.scss?d8ba","webpack:///./src/components/PostReply/PostReply.tsx","webpack:///./src/components/Reply/Reply.tsx","webpack:///./src/components/Replies/Replies.tsx","webpack:///./src/components/Replies/Replies.module.scss?b07e","webpack:///./src/helpers/functions/validateCommentInput.ts"],"sourcesContent":["import React, { FC } from \"react\"\r\nimport styles from \"./CommentInput.module.scss\"\r\n\r\ninterface CommentInputProps {\r\n    ref?: HTMLTextAreaElement\r\n    formId?: string\r\n    name?: string\r\n    children?: React.ReactNode\r\n    isEditable?: boolean\r\n}\r\n\r\nconst CommentInput: FC<CommentInputProps> = React.forwardRef(\r\n    ({ formId, name, isEditable = true, ...props }, ref) => {\r\n        return (\r\n            <textarea\r\n                ref={ref}\r\n                // disabled={!isEditable}\r\n                className={`${styles[\"comment-area\"]} ${\r\n                    !isEditable && styles[\"comment-area--disabled\"]\r\n                }`}\r\n                placeholder={\"Add a comment...\"}\r\n                form={formId}\r\n                name={name}\r\n                spellCheck=\"false\">\r\n                {props.children}\r\n            </textarea>\r\n        )\r\n    }\r\n)\r\n\r\nexport default CommentInput\r\n","// extracted by mini-css-extract-plugin\nexport default {\"comment-area\":\"_HWjqUeDKoKx0tkZI_JN\",\"comment-area--disabled\":\"brn4uczzrOo7KiEFRwya\"};","import React, { FC } from \"react\"\r\nimport styles from \"./Button.module.scss\"\r\n\r\ninterface ButtonProps {\r\n    ref?: any\r\n    id?: string\r\n    type?: \"button\" | \"submit\" | \"reset\" | undefined\r\n    children?: React.ReactNode\r\n}\r\n\r\nconst Button: FC<ButtonProps> = React.forwardRef(\r\n    ({ ref, id, type, ...props }) => {\r\n        return (\r\n            <button\r\n                {...{ ref, id, type }}\r\n                className={styles[\"button\"]}>\r\n                {props.children}\r\n            </button>\r\n        )\r\n    }\r\n)\r\n\r\nexport default Button\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content-box\":\"BG20cIMtJEcPU521S1d9\",\"button\":\"WTsBDLCOKo9YUGHVtMxw\"};","import React, { FC, useEffect } from \"react\"\r\nimport CommentInput from \"../CommentInput/CommentInput\"\r\nimport ContainedImage from \"../ContainedImage/ContainedImage\"\r\nimport Button from \"../UI/Button/Button\"\r\nimport styles from \"./PostForm.module.scss\"\r\nimport { Action } from \"../../models/ActionTypes\"\r\n\r\nexport interface PostFormProps extends Action {\r\n    id?: number\r\n    formId?: string\r\n    avatarUrl: string\r\n    buttonValue?: string\r\n    buttonRef?: any\r\n    textAreaValue?: string\r\n    textAreaRef?: any\r\n}\r\n\r\nconst PostForm: FC<PostFormProps> = ({\r\n    id,\r\n    formId,\r\n    avatarUrl,\r\n    buttonValue,\r\n    buttonRef,\r\n    textAreaValue,\r\n    textAreaRef,\r\n    action,\r\n}) => {\r\n    useEffect(() => {\r\n        textAreaRef?.current.focus()\r\n    }, [])\r\n\r\n    return (\r\n        <form\r\n            id={formId}\r\n            className={styles[\"post-form\"]}\r\n            onSubmit={(e) => {\r\n                e.preventDefault()\r\n                e.stopPropagation()\r\n                action!(id)\r\n            }}>\r\n            <ContainedImage\r\n                src={avatarUrl}\r\n                alt={\"You\"}\r\n                maxWidth={\"2.5rem\"}\r\n            />\r\n            <CommentInput ref={textAreaRef}>{textAreaValue || \"\"}</CommentInput>\r\n            <Button\r\n                ref={buttonRef}\r\n                type=\"submit\">\r\n                {buttonValue}\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PostForm\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content-box\":\"P_8e_89n6wyuur9huDJU\",\"post-form\":\"Sk7HApTULkdTBf7PTMg5\"};","import React, { FC, useCallback, useContext, useRef } from \"react\"\r\nimport { CommentDetailsContext } from \"../../context/CommentDetailsContext\"\r\nimport { CommentsContext } from \"../../context/CommentsContext\"\r\nimport { UserContext } from \"../../context/UserContext\"\r\nimport getAvatarImagePathByUsername from \"../../helpers/functions/getAvatarImagePathByUsername\"\r\nimport getNewComment from \"../../helpers/functions/getNewComment\"\r\nimport validateCommentInput, { MessageStates } from \"../../helpers/functions/validateCommentInput\"\r\nimport { CommentProps } from \"../Comment/Comment\"\r\nimport PostForm from \"../PostForm/PostForm\"\r\nimport { ReplyProps } from \"../Reply/Reply\"\r\n\r\nexport interface ReplyFormProps {\r\n    replyingTo: string\r\n}\r\n\r\nconst PostReply: FC<ReplyFormProps> = ({ replyingTo }) => {\r\n    const { avatarUrl, userName } = useContext(UserContext)\r\n    const { setLocalReplies } = useContext(CommentDetailsContext)\r\n    const { lastId } = useContext(CommentsContext)\r\n\r\n    // уцйу\r\n    // //add reply\r\n    const replyInputRef = useRef<HTMLTextAreaElement>(null)\r\n\r\n    const addReply = useCallback(() => {\r\n        const text = replyInputRef!.current!.value\r\n\r\n        const validatedInput = validateCommentInput(text)\r\n\r\n        switch (validatedInput) {\r\n            case MessageStates.Normal: {\r\n                break\r\n            }\r\n            default: {\r\n                alert(validatedInput)\r\n                return\r\n            }\r\n        }        \r\n\r\n        setLocalReplies((currentLocalReplies) => [\r\n            ...(currentLocalReplies?.filter(\r\n                (reply) => reply.id !== \"replyForm\"\r\n            ) || []),\r\n            {\r\n                id: `${lastId + 1}`,\r\n                likesCount: { likesCount: 0 },\r\n                commentBodyInfo: {\r\n                    headerInfo: {\r\n                        userDetails: {\r\n                            userInfo: {\r\n                                avatarUrl:\r\n                                    getAvatarImagePathByUsername(userName),\r\n                                userName,\r\n                            },\r\n                            when: \"today\",\r\n                        },\r\n                    },\r\n                    article: { article: text },\r\n                },\r\n            },\r\n        ])\r\n    }, [avatarUrl, replyingTo, lastId])\r\n\r\n    return (\r\n        <PostForm\r\n            formId={\"replyForm\"}\r\n            avatarUrl={avatarUrl}\r\n            textAreaRef={replyInputRef}\r\n            textAreaValue={`@${replyingTo}, `}\r\n            buttonValue={\"Reply\"}\r\n            action={addReply}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PostReply\r\n","import React, { FC } from \"react\"\r\nimport { ICommentContent } from \"../Comment/Comment\"\r\nimport PostReply, { ReplyFormProps } from \"../PostReply/PostReply\"\r\nimport CommentContent from \"../CommentContent/CommentContent\"\r\n\r\nexport interface ReplyProps extends ICommentContent, ReplyFormProps {}\r\n\r\nconst Reply: FC<ReplyProps> = (props) => {\r\n    return (\r\n        <>\r\n            {props.commentBodyInfo ? (\r\n                <CommentContent {...props} />\r\n            ) : (\r\n                <PostReply\r\n                    key={props.id}\r\n                    replyingTo={props.replyingTo}\r\n                />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Reply\r\n","import React, { FC, useContext } from \"react\"\r\nimport { CommentDetailsContext } from \"../../context/CommentDetailsContext\"\r\nimport { UserContext } from \"../../context/UserContext\"\r\nimport Comment, { CommentProps, ICommentContent } from \"../Comment/Comment\"\r\nimport Reply, { ReplyProps } from \"../Reply/Reply\"\r\nimport PostReply, { ReplyFormProps } from \"../PostReply/PostReply\"\r\nimport styles from \"./Replies.module.scss\"\r\n\r\nexport interface RepliesProps {\r\n    replies?: ReplyProps[] | undefined\r\n}\r\n\r\nconst Replies: FC<RepliesProps> = ({ replies }) => {\r\n    // const [awaitedReplies, setAwaitedReplies] = useState<\r\n    //     CommentProps[] | undefined\r\n    // >([])\r\n\r\n    const { userName } = useContext(CommentDetailsContext)\r\n\r\n    const { avatarUrl } = useContext(UserContext)\r\n\r\n    // useEffect(() => {\r\n    //     repliesPromise?.then((data) => {\r\n    //         setAwaitedReplies((_) => data)\r\n    //         setReplies((_) => data)\r\n    //     })\r\n    // }, [])\r\n\r\n    return (\r\n        <>\r\n            {replies?.length! > 0 && (\r\n                <section\r\n                    className={styles[\"replies-section\"]}\r\n                    aria-label=\"replies\">\r\n                    <div\r\n                        className={\r\n                            styles[\"replies-section__left-separator\"]\r\n                        }></div>\r\n\r\n                    <div className={styles[\"replies\"]}>\r\n                        {replies?.map((reply) => (\r\n                            <>\r\n                                {reply.commentBodyInfo ? (\r\n                                    <Reply\r\n                                        key={reply.id}\r\n                                        {...reply}\r\n                                    />\r\n                                ) : (\r\n                                    <PostReply\r\n                                        key={reply.id}\r\n                                        replyingTo={reply.replyingTo}\r\n                                    />\r\n                                )}\r\n                            </>\r\n                        ))}\r\n                    </div>\r\n                </section>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Replies\r\n","// extracted by mini-css-extract-plugin\nexport default {\"comments-section\":\"OSGLeNYaVm8mBevVXgRy\",\"replies-section\":\"XPyU4wNPHTebBrJfBmWL\",\"replies\":\"G7vY3DVO5DqD197HgQRS\",\"replies-section__left-separator\":\"Wtkg96pYwAmLFCKYpBAg\"};","export enum MessageStates {\r\n    Short = \"Your comment looks a bit short. Try again with some longer message of yours.\",\r\n    Empty = \"Your comment looks empty. Try again with some message of yours.\",\r\n    Normal = \"Your comment will be added soon!\",\r\n}\r\n\r\nfunction validateCommentInput(text: string): MessageStates {\r\n    if (!text) {\r\n        return MessageStates.Empty\r\n    } else if (text.length < 4) {\r\n        return MessageStates.Short\r\n    } else {\r\n        return MessageStates.Normal\r\n    }\r\n}\r\n\r\nexport default validateCommentInput\r\n"],"names":["React","ref","formId","name","isEditable","props","className","placeholder","form","spellCheck","children","id","type","avatarUrl","buttonValue","buttonRef","textAreaValue","textAreaRef","action","useEffect","current","focus","onSubmit","e","preventDefault","stopPropagation","ContainedImage","src","alt","maxWidth","replyingTo","useContext","UserContext","userName","setLocalReplies","CommentDetailsContext","lastId","CommentsContext","replyInputRef","useRef","addReply","useCallback","text","value","validatedInput","validateCommentInput","MessageStates","currentLocalReplies","filter","reply","likesCount","commentBodyInfo","headerInfo","userDetails","userInfo","getAvatarImagePathByUsername","when","article","alert","PostForm","CommentContent","key","replies","length","map","Short","Normal","Empty"],"sourceRoot":""}