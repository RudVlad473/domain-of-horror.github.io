{"version":3,"file":"285.chunk.js","mappings":"8KAQMA,EAAWC,EAAAA,MAAW,kBAAM,4BAA8B,IA6DhE,QA3DwB,WACpB,OAAgCC,EAAAA,EAAAA,YAAWC,EAAAA,GAAnCC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAEXC,GAAmBJ,EAAAA,EAAAA,YAAWK,EAAAA,GAA9BD,eAEFE,GAAkBC,EAAAA,EAAAA,QAA4B,MAC9CC,GAAkBD,EAAAA,EAAAA,QAA0B,MAuClD,OATAE,EAAAA,EAAAA,YAAU,WACNC,OAAOC,iBAAiB,YAAY,SAACC,GACjCA,EAAEC,2BACW,SAATD,EAAEE,KACFN,EAAiBO,QAASC,OAElC,GACJ,GAAG,IAGC,gBAAC,WAAc,KACX,gBAAClB,EAAQ,CACLmB,GAAI,EACJf,UAAWA,EACXgB,OA1CZ,WACI,IAAMC,EAAOb,aAAe,EAAfA,EAAiBS,QAASK,MACjCC,GAAiBC,EAAAA,EAAAA,GAAqBH,GAE5C,GAAQE,IACCE,EAAAA,EAAAA,OADT,CAUA,IAAMC,EC3Bd,SAAuB,GAgBN,IAfbP,EAAE,EAAFA,GACAQ,EAAU,EAAVA,WAEAtB,GADS,EAATD,UACQ,EAARC,UACAuB,EAAS,EAATA,UACAC,EAAO,EAAPA,QACAC,EAAO,EAAPA,QAUA,MAAO,CACHX,GAAI,GAAF,OAAKA,GACPQ,WAAY,CAAEA,WAAAA,GACdI,gBAAiB,CACbC,WAAY,CACRC,YAAa,CACTC,SAAU,CACN9B,WAAW+B,EAAAA,EAAAA,GAA6B9B,GACxCA,SAAAA,GAEJ+B,KAAMR,IAGdC,QAAS,CAAEA,QAAAA,IAEfC,QAASA,GAAUO,EAAAA,EAAAA,GAAgBP,QAAWQ,EAEtD,CDPyCC,CAAc,CAC3CpB,GAAI,GACJQ,WAAY,EACZvB,UAAAA,EACAC,SAAAA,EACAuB,UAAW,QACXC,QAASrB,EAAiBS,QAASK,MACnCQ,aAASQ,IAEbhC,EAAe,CAACoB,IAEhBlB,EAAiBS,QAASK,MAAQ,EAd7B,MAFGkB,MAAMjB,EAiBlB,EAiBYkB,YAAa,OACbC,UAAWhC,EACXiC,YAAanC,IAI7B,C,gBEnEO,IAAKiB,E,yBAIX,SAJWA,GAAAA,EAAa,qFAAbA,EAAa,wEAAbA,EAAa,0CAIxB,CAJWA,IAAAA,EAAa,KAgBzB,QAVA,SAA8BJ,GAC1B,OAAKA,EAEMA,EAAKuB,OAAS,EACdnB,EAAcoB,MAEdpB,EAAcqB,OAJdrB,EAAcsB,KAM7B,C","sources":["webpack:///./src/components/PostComment/PostComment.tsx","webpack:///./src/helpers/functions/getNewComment.ts","webpack:///./src/helpers/functions/validateCommentInput.ts"],"sourcesContent":["import React, { FC, useContext, useEffect, useRef } from \"react\"\r\nimport { CommentsContext } from \"../../context/CommentsContext\"\r\nimport { UserContext } from \"../../context/UserContext\"\r\nimport getNewComment from \"../../helpers/functions/getNewComment\"\r\nimport validateCommentInput, {\r\n    MessageStates,\r\n} from \"../../helpers/functions/validateCommentInput\"\r\nimport { CommentProps } from \"../Comment/Comment\"\r\nconst PostForm = React.lazy(() => import(\"../PostForm/PostForm\"))\r\n\r\nconst PostComment: FC = () => {\r\n    const { avatarUrl, userName } = useContext(UserContext)\r\n\r\n    const { appendComments } = useContext(CommentsContext)\r\n\r\n    const commentInputRef = useRef<HTMLTextAreaElement>(null)\r\n    const submitButtonRef = useRef<HTMLButtonElement>(null)\r\n\r\n    function addComment() {\r\n        const text = commentInputRef?.current!.value\r\n        const validatedInput = validateCommentInput(text)\r\n\r\n        switch (validatedInput) {\r\n            case MessageStates.Normal: {\r\n                break\r\n            }\r\n            default: {\r\n                alert(validatedInput)\r\n                return\r\n            }\r\n        }\r\n\r\n        const newComment: CommentProps = getNewComment({\r\n            id: \"\",\r\n            likesCount: 0,\r\n            avatarUrl,\r\n            userName,\r\n            createdAt: \"today\",\r\n            article: commentInputRef!.current!.value,\r\n            replies: undefined,\r\n        })\r\n        appendComments([newComment])\r\n\r\n        commentInputRef!.current!.value = \"\"\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keypress\", (e: KeyboardEvent) => {\r\n            e.stopImmediatePropagation()\r\n            if (e.key == \"Enter\") {\r\n                submitButtonRef!.current!.click()\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <React.Suspense>\r\n            <PostForm\r\n                id={0}\r\n                avatarUrl={avatarUrl}\r\n                action={addComment}\r\n                buttonValue={\"Send\"}\r\n                buttonRef={submitButtonRef}\r\n                textAreaRef={commentInputRef}\r\n            />\r\n        </React.Suspense>\r\n    )\r\n}\r\n\r\nexport default PostComment\r\n","import { CommentProps } from \"../../components/Comment/Comment\"\r\nimport { FetchedComment } from \"../../components/CommentsSection/CommentsSection\"\r\nimport extractComments from \"./extractComments\"\r\nimport getAvatarImagePathByUsername from \"./getAvatarImagePathByUsername\"\r\n\r\nfunction getNewComment({\r\n    id,\r\n    likesCount,\r\n    avatarUrl,\r\n    userName,\r\n    createdAt,\r\n    article,\r\n    replies,\r\n}: {\r\n    id: string\r\n    likesCount: number\r\n    avatarUrl: string\r\n    userName: string\r\n    createdAt: string\r\n    article: string\r\n    replies: FetchedComment[] | undefined\r\n}): CommentProps {\r\n    return {\r\n        id: `${id}`,\r\n        likesCount: { likesCount },\r\n        commentBodyInfo: {\r\n            headerInfo: {\r\n                userDetails: {\r\n                    userInfo: {\r\n                        avatarUrl: getAvatarImagePathByUsername(userName),\r\n                        userName,\r\n                    },\r\n                    when: createdAt,\r\n                },\r\n            },\r\n            article: { article },\r\n        },\r\n        replies: replies ? extractComments(replies) : undefined,\r\n    }\r\n}\r\n\r\nexport default getNewComment\r\n","export enum MessageStates {\r\n    Short = \"Your comment looks a bit short. Try again with some longer message of yours.\",\r\n    Empty = \"Your comment looks empty. Try again with some message of yours.\",\r\n    Normal = \"Your comment will be added soon!\",\r\n}\r\n\r\nfunction validateCommentInput(text: string): MessageStates {\r\n    if (!text) {\r\n        return MessageStates.Empty\r\n    } else if (text.length < 4) {\r\n        return MessageStates.Short\r\n    } else {\r\n        return MessageStates.Normal\r\n    }\r\n}\r\n\r\nexport default validateCommentInput\r\n"],"names":["PostForm","React","useContext","UserContext","avatarUrl","userName","appendComments","CommentsContext","commentInputRef","useRef","submitButtonRef","useEffect","window","addEventListener","e","stopImmediatePropagation","key","current","click","id","action","text","value","validatedInput","validateCommentInput","MessageStates","newComment","likesCount","createdAt","article","replies","commentBodyInfo","headerInfo","userDetails","userInfo","getAvatarImagePathByUsername","when","extractComments","undefined","getNewComment","alert","buttonValue","buttonRef","textAreaRef","length","Short","Normal","Empty"],"sourceRoot":""}