{"version":3,"file":"825.chunk.js","mappings":"wJAaMA,EAAWC,EAAAA,MAAW,kBAAM,oDAA8B,IAiEhE,QA3D0C,SAAH,GAA2B,IAArBC,EAAc,EAAdA,eACzC,GAAgCC,EAAAA,EAAAA,YAAWC,EAAAA,GAAnCC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAEbC,GAAkBC,EAAAA,EAAAA,QACpB,MAEEC,GAAkBD,EAAAA,EAAAA,QACpB,MAwCJ,OATAE,EAAAA,EAAAA,YAAU,WACNC,OAAOC,iBAAiB,YAAY,SAACC,GACjCA,EAAEC,2BACW,SAATD,EAAEE,KACFN,EAAgBO,QAAQC,OAEhC,GACJ,GAAG,IAGC,gBAAC,WAAc,KACX,gBAACjB,EAAQ,CACLkB,YAAaX,EACbY,aAzCZ,WACI,IAAMC,EAAOb,EAAgBS,QAAQK,MAC/BC,GAAiBC,EAAAA,EAAAA,GAAqBH,GAE5C,GAAQE,IACCE,EAAAA,EAAAA,OADT,CAUA,IAAMC,GAA2BC,EAAAA,EAAAA,GAAc,CAC3CC,GAAI,EACJC,WAAY,EACZvB,UAAAA,EACAC,SAAAA,EACAuB,UAAW,QACXC,QAASvB,EAAgBS,QAAQK,MACjCU,aAASC,IAEb9B,EAAe,CAACuB,IAEhBlB,EAAgBS,QAAQK,MAAQ,EAd3B,MAFGY,MAAMX,EAiBlB,EAgBYY,YAAY,OACZC,UAAW1B,IAI3B,C","sources":["webpack:///./src/components/PostComment/PostComment.tsx"],"sourcesContent":["import React, {\r\n    FC,\r\n    MutableRefObject,\r\n    useContext,\r\n    useEffect,\r\n    useRef\r\n} from \"react\"\r\nimport { UserContext } from \"../../context/UserContext\"\r\nimport getNewComment from \"../../helpers/functions/getNewComment\"\r\nimport validateCommentInput, {\r\n    MessageStates\r\n} from \"../../helpers/functions/validateCommentInput\"\r\nimport { CommentProps } from \"../Comment/Comment\"\r\nconst PostForm = React.lazy(() => import(\"../PostForm/PostForm\"))\r\n\r\ninterface PostCommentProps {\r\n    appendComments(comments: CommentProps[]): void\r\n}\r\n\r\nconst PostComment: FC<PostCommentProps> = ({ appendComments }) => {\r\n    const { avatarUrl, userName } = useContext(UserContext)\r\n\r\n    const commentInputRef = useRef<HTMLTextAreaElement>(\r\n        null\r\n    ) as MutableRefObject<HTMLTextAreaElement>\r\n    const submitButtonRef = useRef<HTMLButtonElement>(\r\n        null\r\n    ) as MutableRefObject<HTMLButtonElement>\r\n\r\n    function addComment() {\r\n        const text = commentInputRef.current.value\r\n        const validatedInput = validateCommentInput(text)\r\n\r\n        switch (validatedInput) {\r\n            case MessageStates.Normal: {\r\n                break\r\n            }\r\n            default: {\r\n                alert(validatedInput)\r\n                return\r\n            }\r\n        }\r\n\r\n        const newComment: CommentProps = getNewComment({\r\n            id: 0,\r\n            likesCount: 0,\r\n            avatarUrl,\r\n            userName,\r\n            createdAt: \"today\",\r\n            article: commentInputRef.current.value,\r\n            replies: undefined\r\n        })\r\n        appendComments([newComment])\r\n\r\n        commentInputRef.current.value = \"\"\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keypress\", (e: KeyboardEvent) => {\r\n            e.stopImmediatePropagation()\r\n            if (e.key == \"Enter\") {\r\n                submitButtonRef.current.click()\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <React.Suspense>\r\n            <PostForm\r\n                textAreaRef={commentInputRef}\r\n                onFormSubmit={addComment}\r\n                buttonValue=\"SEND\"\r\n                buttonRef={submitButtonRef}\r\n            />\r\n        </React.Suspense>\r\n    )\r\n}\r\n\r\nexport default PostComment\r\n"],"names":["PostForm","React","appendComments","useContext","UserContext","avatarUrl","userName","commentInputRef","useRef","submitButtonRef","useEffect","window","addEventListener","e","stopImmediatePropagation","key","current","click","textAreaRef","onFormSubmit","text","value","validatedInput","validateCommentInput","MessageStates","newComment","getNewComment","id","likesCount","createdAt","article","replies","undefined","alert","buttonValue","buttonRef"],"sourceRoot":""}